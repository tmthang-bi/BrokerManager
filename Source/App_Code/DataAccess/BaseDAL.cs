using System;
using System.Data;
using System.Text;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using BrokerManager.DataObjects;
using System.Globalization;

/// <summary>
/// Summary description for UserData
/// </summary>
namespace BrokerManager.DataAccess
{
    public class BaseDAL
    {
        private IDataAccess dataAccess;
        public IDataAccess DataAccess
        {
            get { return dataAccess; }
            set { dataAccess = value; }
        }

        public BaseDAL()
        {
            dataAccess = DataAccessFactory.CreateDataAccess();
        }

        /// <summary>
        /// Build InsertCommand with a given tableName, colummNames
        /// and array of parameters
        /// </summary>
        /// <param name="idReturn">Return the autogenerated id of record</param>
        /// <param name="tableName">Name of Table</param>
        /// <param name="columnNames">Array of table's column</param>
        /// <param name="parameters">Array of parameter</param>
        /// <returns></returns>
        //protected string BuildInsertCommand(string tableName, string[] columnNames, params object[] parameters)
        //{

        //    // build insert command
        //    StringBuilder cmdText = new StringBuilder("INSERT INTO ");
        //    cmdText.Append(tableName);

        //    StringBuilder columns = new StringBuilder();
        //    StringBuilder values = new StringBuilder();

        //    for (int i = 0; i < columnNames.Length; i++)
        //    {
        //        columns.Append(columnNames[i] + ",");
        //        values.Append(formatSQLParamenter(parameters[i]));
        //        values.Append(",");
        //    }
        //    //remove the last ','
        //    columns.Remove(columns.Length - 1, 1);
        //    values.Remove(values.Length - 1, 1);

        //    cmdText.Append("(" + columns + ") VALUES (" + values + ")");

        //    return cmdText.ToString();
        //}

        //protected String formatSQLParamenter(object param)
        //{
        //    DateTime time = DateTime.Now;
        //    Type timeType = time.GetType();
        //    bool boolValue = false;
        //    Type boolType = boolValue.GetType();

        //    if (timeType.IsInstanceOfType(param))
        //    {
        //        DateTime value = (DateTime)param;
        //        return formatSQLDateTime(value);
        //    }
        //    else if (boolType.IsInstanceOfType(param))
        //    {
        //        bool value = (DateTime)param;
        //        return formatSQLDateTime(value);
        //    }
        //    else
        //    {
        //        return "\'" + param.ToString() + "\'";
        //    }

        //}

        ////SELECT convert(datetime, '23/10/2016', 103) -- dd/mm/yyyy 
        //protected string formatSQLDateTime(DateTime value) 
        //{
        //    DateTimeFormatInfo info = new DateTimeFormatInfo();
        //    info.ShortDatePattern = "dd/MM/yyyy";
        //    return "convert(datetime,\'" + date.ToString(info) + "\',103)";
        //}
    }


}